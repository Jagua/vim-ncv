let s:scope = themis#helper('scope')

Describe ncv#new()
  It should return a new instance
    let props = {
          \ 'func' : [
          \   'listener',
          \   'view',
          \   'watch',
          \ ],
          \ 'dict' : [
          \   'echo',
          \ ],
          \}
    Assert IsInstance(ncv#new(), props)
  End
End

Describe s:
  Before all
    let funcs = s:scope.funcs('autoload/ncv.vim')
  End

  After all
    unlet funcs
  End

  Describe strdisplayheight(lines)
    It should return proper display height
      Assert Equals(funcs.strdisplayheight([]), 0)
      Assert Equals(funcs.strdisplayheight(['']), 1)
      Assert Equals(funcs.strdisplayheight(['', '']), 2)
      Assert Equals(funcs.strdisplayheight([repeat('a', winwidth(0) * 1 + 0)]), 1)
      Assert Equals(funcs.strdisplayheight([repeat('a', winwidth(0) * 1 + 1)]), 2)
      Assert Equals(funcs.strdisplayheight([repeat('a', winwidth(0) * 2 + 0)]), 2)
      Assert Equals(funcs.strdisplayheight([repeat('a', winwidth(0) * 2 + 1)]), 3)
    End
  End
End

Describe s:ncv_prototype
  Before all
    let vars = s:scope.vars('autoload/ncv.vim')
    let ncv_prototype = vars.ncv_prototype
  End

  After all
    unlet vars ncv_prototype
  End

  It should return a instance
    let props = {
          \ 'func' : [
          \   'listener',
          \   'watch',
          \   'view',
          \ ],
          \}
    Assert IsInstance(ncv_prototype, props)
  End
End

Describe s:niconico
  Before all
    let vars = s:scope.vars('autoload/ncv.vim')
    let niconico = vars.niconico
  End

  After all
    unlet vars niconico
  End

  Describe .api
    It should return a instance
      let props = {
            \ 'func' : [
            \   'login',
            \   'getplayerstatus',
            \ ],
            \}
      Assert IsInstance(niconico.api, props)
    End
  End

  Describe .chat
    It should return a instance
      let props = {
            \ 'func' : [
            \   'format',
            \   'parse_chat',
            \   'vpos_to_time',
            \ ],
            \}
      Assert IsInstance(niconico.chat, props)
    End

    Context .parse_chat(chatstr)
      It should parse and return a dictionary
        Assert EqualsDict(
              \ niconico.chat.parse_chat('<chat user_id="1" vpos="200">wakotu-</chat>'),
              \ {
              \   'user_id' : '1',
              \   'vpos' : '200',
              \   'text' : 'wakotu-',
              \ }
              \)
      End
    End

    Context .vpos_to_time(vpos)
      It should return a time string formatted '%H:%M:%S'
        Assert Equals(niconico.chat.vpos_to_time(0), '00:00:00')
        Assert Equals(niconico.chat.vpos_to_time(360000), '01:00:00')
      End
    End
  End
End

Describe s:listener
  Before all
    let vars = s:scope.vars('autoload/ncv.vim')
    let listener = vars.listener
    let listener_props = {
          \ 'func' : [
          \   'new',
          \   'parse_getplayerstatus',
          \   'close_windows',
          \ ],
          \}
    let listener_sub_props = extend(copy(listener_props), {
          \ 'func' : [
          \   'available',
          \   'do',
          \   'thread_tag',
          \   'callback',
          \   'stop',
          \ ],
          \})
  End

  After all
    unlet vars listener listener_props listener_sub_props
  End

  Describe .prototype
    It should return a instance
      Assert IsInstance(listener.prototype, listener_props)
    End
  End

  Describe .channel
    It should return a instance
      Assert IsInstance(listener.channel, listener_sub_props)
    End
  End

  Describe .netcat
    It should return a instance
      Assert IsInstance(listener.netcat, listener_sub_props)
    End
  End
End
